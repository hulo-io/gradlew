// @hulo-build batch
//!/usr/bin/env bash

// ############################################################################
//
//  Gradle start up script for UN*X
//
// ############################################################################

// Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
var DEFAULT_JVM_OPTS=""

var APP_NAME="Gradle"
var APP_BASE_NAME=`basename "$0"`

// Use the maximum available, or set MAX_FD != -1 to use that value.
var MAX_FD="maximum"

fn warn() => echo "$*"

fn die() => throw """
"$*"
"""

// OS specific support (must be 'true' or 'false').
$cygwin := false
$msys := false
$darwin := false
match $(uname) {
    r"CYGWIN*" => $cygwin = true,
    r"Darwin*" => $darwin = true,
    r"MINGW*" => $msys = true,
}

// Attempt to set APP_HOME
// Resolve links: $0 may be a link
let PRG: File = File($0)
// Need this for relative symlinks.
loop $PRG.is_symbol_link() {
    ${
        ls=`ls -ld "${{@PRG}}"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            {{@PRG}}="$link"
        else
            {{@PRG}}=`dirname "${{@PRG}}"`"/$link"
        fi
    }
}

var SAVED: str = $(pwd)
cd $(dirname $PRG) >null
var APP_HOME: str = $(pwd -P)
cd $SAVED >null

var CLASSPATH = "$APP_HOME/gradle/wrapper/gradle-wrapper.jar"

declare var JAVA_HOME: str?
var JAVACMD: Command
// Determine the Java command to use to start the JVM.
if $JAVA_HOME {
    if f"$JAVA_HOME/jre/sh/java".executable() {
        // IBM's JDK on AIX uses strange locations for the executables
        $JAVACMD = c"$JAVA_HOME/jre/sh/java"
    } else {
        $JAVACMD = c"$JAVA_HOME/bin/java"
    }

    if !$JAVACMD.executable() {
        die """ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."""
    }
} else {
    $JAVACMD = c"java"
    which java >null $stderr>$stdout || die """ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."""
}

// Increase the maximum file descriptors if we can.
if $cygwin && $darwin {
    try {
        $MAX_FD_LIMIT := $(ulimit -H -n)
        if $MAX_FD == "maximum" || $MAX_FD == "max" {
            $MAX_FD = $MAX_FD_LIMIT
        }
        try {
            ulimit -n $MAX_FD
        } catch {
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        }
    } catch {
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    }

}

// For Darwin, add options to specify how the application appears in the dock
if $darwin {
    $GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
}

// For Cygwin, switch paths to Windows format before running java
if $cygwin {
    $APP_HOME = $(cygpath --path --mixed $APP_HOME)
    $CLASSPATH = $(cygpath --path --mixed $CLASSPATH)
    $JAVACMD = $(cygpath --unix $JAVACMD)

    // We build the pattern for arguments to be converted via cygpath
    $ROOTDIRSRAW := $(find -L "/" --maxdepth 1 --mindepth 1 --type d $stderr>null)
    $SEP := ""
    loop $dir in $ROOTDIRSRAW {
        $ROOTDIRS = "$ROOTDIRS$SEP$dir"
        $SEP = "|"
    }
    $OURCYGPATTERN="(^($ROOTDIRS))"
    // Add a user-defined pattern to the cygpath arguments
    if $GRADLE_CYGPATTERN {
        $OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    }
    // Now convert the arguments - kludge to limit ourselves to /bin/sh
    $i := 0
    loop $arg in $@ {
        $CHECK = $(echo $arg | egrep -c $OURCYGPATTERN ${-}) /// Determine if an option
        $CHECK2 = $(echo $arg | egrep -c "^-")

        if $CHECK != 0 && $CHECK2 == 0 { /// Added a condition
            ${eval `echo args$i`=`cygpath --path --ignore --mixed "${{@arg}}"`}
        } else {
            ${eval `echo args$i`="\"${{@arg}}\""}
        }
        $i++
    }

    // TODO use comptime to generate
    match $i {
        0 => ${set -- },
        1 => ${set -- "$args0"},
        2 => ${set -- "$args0" "$args1"},
        3 => ${set -- "$args0" "$args1" "$args2"},
        4 => ${set -- "$args0" "$args1" "$args2" "$args3"},
        5 => ${set -- "$args0" "$args1" "$args2" "$args3" "$args4"},
        6 => ${set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5"},
        7 => ${set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6"},
        8 => ${set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7"},
        9 => ${set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8"},
    }
}

// Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
fn splitJvmOpts() {
    $JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
${
    JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

    exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
}
